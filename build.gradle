apply plugin: "java"
apply plugin: "idea"
apply plugin: 'findbugs'
apply plugin: 'jdepend'
apply plugin: 'pmd'
apply plugin: 'tomcat'

group = "org.govhack.inclusiveteam.data"
version = "$sdRestVersion"
archivesBaseName = "cms"

project.sourceCompatibility = 1.6
project.targetCompatibility = 1.6

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.gradle.api.plugins:gradle-tomcat-plugin:0.9.8'
    }
}

configurations.all {
    exclude group: "commons-logging"
    exclude module: "slf4j-log4j12"
    exclude module: "servlet-api"
}

repositories {
    mavenCentral()
    maven { url "http://repo.springsource.org/libs-snapshot" }
    maven { url "http://repo.springsource.org/libs-milestone" }
    maven { url "http://repo.springsource.org/libs-release" }
}

dependencies {

    // Logging
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    runtime "org.slf4j:jcl-over-slf4j:$slf4jVersion"
    runtime "ch.qos.logback:logback-classic:$logbackVersion"

    // JPA
    compile "org.hibernate.javax.persistence:hibernate-jpa-2.0-api:1.0.1.Final"
    runtime "org.hibernate:hibernate-entitymanager:$hibernateVersion"
    runtime "mysql:mysql-connector-java:5.1.24"

    compile("c3p0:c3p0:0.9.1.2") { force = true }

    // Spring
    compile("org.springframework:spring-aop:$springVersion") { force = true }
    compile("org.springframework:spring-beans:$springVersion") { force = true }
    compile("org.springframework:spring-context:$springVersion") { force = true }
    compile("org.springframework:spring-core:$springVersion") { force = true }
    compile("org.springframework:spring-expression:$springVersion") { force = true }
    compile("org.springframework:spring-orm:$springVersion") { force = true }
    compile("org.springframework:spring-tx:$springVersion") { force = true }
    compile("org.springframework:spring-web:$springVersion") { force = true }
    compile("org.springframework:spring-webmvc:$springVersion") { force = true }
    compile("org.springframework:spring-test:$springVersion") { force = true }

    //compile("org.springframework.security:spring-security-web:$springSecurityVersion") { force = true }
    //compile("org.springframework.security:spring-security-config:$springSecurityVersion") { force = true }

    compile "javax.inject:javax.inject:1"

    compile("org.codehaus.jackson:jackson-mapper-asl:1.9.8") { force = true }

    // Spring Data
    compile "org.springframework.data:spring-data-commons-core:$sdCommonsVersion"
    compile "org.springframework.data:spring-data-jpa:$sdJpaVersion"
    compile "org.springframework.data:spring-data-neo4j:$springNeo4jVersion"

    // Spring Data REST
    compile "org.springframework.data:spring-data-rest-webmvc:$sdRestVersion"

    // Spring Integration
    //compile "org.springframework.integration:spring-integration-file:$springIntegrationVersion"

    // Spring Batch
    //compile "org.springframework.batch:spring-batch-core:2.1.8"

    // Open CSV
    compile "net.sf.opencsv:opencsv:2.3"

    // Servlet 3.0
    providedCompile "javax.servlet:javax.servlet-api:3.0.1"

    // Neo4j
    compile "org.neo4j:1.9"


    // POI
    //compile "org.apache.poi:poi:3.9"
    //compile "org.apache.poi:poi-ooxml:3.9"

    // test
    testCompile("org.hamcrest:hamcrest-core:1.1") { force = true }
    testCompile("org.dbunit:dbunit:2.4.9") { force = true }
    testCompile("com.github.springtestdbunit:spring-test-dbunit:1.0.1") { force = true }
    testCompile("org.hsqldb:hsqldb:2.2.9") { force = true }
    testCompile("org.easymock:easymock:${easymockVersion}")
    testCompile("org.mockito:mockito-all:1.9.5") { force = true }
    testCompile "junit:junit:4.11"
    testCompile "org.springframework:spring-test:$springVersion"
    testRuntime "org.springframework:spring-context-support:$springVersion"

    def tomcatVersion = '7.0.32'
    tomcat "org.apache.tomcat.embed:tomcat-embed-core:${tomcatVersion}",
            "org.apache.tomcat.embed:tomcat-embed-logging-juli:${tomcatVersion}"
    tomcat("org.apache.tomcat.embed:tomcat-embed-jasper:${tomcatVersion}") {
        exclude group: 'org.eclipse.jdt.core.compiler', module: 'ecj'
    }

}

idea {
    project {
        jdkName = "1.7"
        languageLevel = "1.6"
        ipr {
            withXml { xml ->
                xml.node.component.find { it.@name == "VcsDirectoryMappings" }.mapping.@vcs = "Git"
                xml.node.component.find { it.@name == "ProjectRootManager" }.output.@url = "file://\$PROJECT_DIR\$/build"
            }
        }
    }
}

war {
    archiveName = "$warName"
}

test {
    // Add System property to running tests.
    //    systemProperty 'sysProp', 'value'
    // Use the following JVM arguments for each test process.
    jvmArgs '-Xms256m', '-Xmx512m'
    // Enable debugging mode.
    debug = false
    // Ignore any test failues and don't fail the build.
    ignoreFailures = true
    // Enable assertions for test with the assert keyword.
    enableAssertions = true
}

// Findbugs config
tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

findbugs {
    toolVersion = "2.0.1"
    sourceSets = [sourceSets.main]
    ignoreFailures = true
    reportsDir = file("$project.buildDir/findbugsReports")
    effort = "max"
    reportLevel = "high"
    // visitors = ["FindSqlInjection", "SwitchFallthrough"]
    // omitVisitors = ["FindNonShortCircuit"]
    // includeFilter = file("$rootProject.projectDir/config/findbugs/includeFilter.xml")
    // excludeFilter = file("$rootProject.projectDir/config/findbugs/excludeFilter.xml")
}

configure(tasks.withType(Pmd)) {

    reports {
        html.enabled = true
        xml.enabled = false
    }
}

pmd {

    toolVersion = "5.0.4"
    // Don't fail the build process when rule violations are found.
    ignoreFailures = true

    ruleSets = ["basic", "braces", "codesize"]
}

